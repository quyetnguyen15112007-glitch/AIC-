import os
import base64
import cv2
import numpy as np
from deepface import DeepFace
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI  # TH√äM M·ªöI
from dotenv import load_dotenv # TH√äM M·ªöI

# --- PH·∫¶N THI·∫æT L·∫¨P M·ªöI CHO CHATGPT ---
# T·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env (ch·ª©a OPENAI_API_KEY)
load_dotenv()

# Kh·ªüi t·∫°o Flask app v√† cho ph√©p Cross-Origin Resource Sharing (CORS)
app = Flask(__name__)
CORS(app)

# Kh·ªüi t·∫°o OpenAI client, API key s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông ƒë·ªçc t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
try:
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    print("OpenAI client ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng.")
except Exception as e:
    print(f"L·ªói: Kh√¥ng th·ªÉ kh·ªüi t·∫°o OpenAI client. L·ªói chi ti·∫øt: {e}")
    client = None
# --- K·∫æT TH√öC PH·∫¶N THI·∫æT L·∫¨P M·ªöI ---


# --- PH·∫¶N API PH√ÇN T√çCH ·∫¢NH (GI·ªÆ NGUY√äN) ---
emotions_map = {
    "happy": "Vui v·∫ª", "sad": "Bu·ªìn", "angry": "T·ª©c gi·∫≠n",
    "surprise": "Ng·∫°c nhi√™n", "fear": "Lo l·∫Øng", "neutral": "B√¨nh tƒ©nh",
    "disgust": "Gh√™ t·ªüm"
}

@app.route('/analyze', methods=['POST'])
def analyze_emotion():
    data = request.json
    if not data or 'image' not in data:
        return jsonify({'error': 'Kh√¥ng c√≥ d·ªØ li·ªáu ·∫£nh'}), 400

    image_data = data['image'].split(',')[1]
    decoded_data = base64.b64decode(image_data)
    np_arr = np.frombuffer(decoded_data, np.uint8)
    frame = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)

    try:
        results = DeepFace.analyze(
            frame,
            actions=['emotion'],
            enforce_detection=False,
            detector_backend='mtcnn'
        )

        if results and isinstance(results, list) and results[0]:
            dominant_emotion_en = results[0].get('dominant_emotion')
            dominant_emotion_vi = emotions_map.get(dominant_emotion_en, "Kh√¥ng x√°c ƒë·ªãnh")
            return jsonify({
                'emotion_en': dominant_emotion_en,
                'emotion_vi': dominant_emotion_vi
            })
        else:
            return jsonify({'emotion_vi': 'Kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t'})

    except Exception as e:
        print(f"L·ªói khi ph√¢n t√≠ch: {e}")
        return jsonify({'error': str(e)}), 500

# --- PH·∫¶N API CHAT V·ªöI GPT (TH√äM M·ªöI) ---
# S·ª¨A L·∫†I H√ÄM /chat TRONG server.py

# 1. T·∫°o m·ªôt bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ l·ªãch s·ª≠ h·ªôi tho·∫°i (tr√≠ nh·ªõ c·ªßa chatbot)
#    Ch√∫ng ta th√™m c·∫£ "system prompt" v√†o ƒë·∫ßu ƒë·ªÉ ƒë·ªãnh h√¨nh t√≠nh c√°ch cho AI
conversation_history = [
    {
        "role": "system",
        "content": "B·∫°n l√† SoulLens, m·ªôt tr·ª£ l√Ω AI ƒë·ªìng c·∫£m v√† th·∫•u hi·ªÉu. H√£y tr·∫£ l·ªùi m·ªôt c√°ch ng·∫Øn g·ªçn, ·∫•m √°p v√† lu√¥n ƒë∆∞a ra nh·ªØng g·ª£i √Ω t√≠ch c·ª±c. S·ª≠ d·ª•ng ti·∫øng Vi·ªát."
    }
]

@app.route('/chat', methods=['POST'])
def chat():
    global conversation_history # S·ª≠ d·ª•ng bi·∫øn to√†n c·ª•c
    try:
        data = request.json
        user_message = data.get('message')
        if not user_message:
            return jsonify({"error": "Kh√¥ng c√≥ tin nh·∫Øn"}), 400

        # 2. Th√™m tin nh·∫Øn m·ªõi c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
        conversation_history.append({"role": "user", "content": user_message})
        
        # Gi·ªõi h·∫°n ƒë·ªÉ "tr√≠ nh·ªõ" kh√¥ng qu√° d√†i (ti·∫øt ki·ªám chi ph√≠ v√† t√†i nguy√™n)
        if len(conversation_history) > 15:
            # Gi·ªØ l·∫°i tin nh·∫Øn h·ªá th·ªëng v√† 14 tin nh·∫Øn g·∫ßn nh·∫•t
            conversation_history = [conversation_history[0]] + conversation_history[-14:]

        # 3. G·ª≠i TO√ÄN B·ªò l·ªãch s·ª≠ h·ªôi tho·∫°i cho OpenAI
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=conversation_history # G·ª≠i c·∫£ cu·ªôc h·ªôi tho·∫°i
        )
        
        ai_response = response.choices[0].message.content
        
        # 4. Th√™m c√¢u tr·∫£ l·ªùi c·ªßa AI v√†o l·ªãch s·ª≠ ƒë·ªÉ n√≥ nh·ªõ cho l·∫ßn sau
        conversation_history.append({"role": "assistant", "content": ai_response})

        return jsonify({"reply": ai_response})
    
    except Exception as e:
        print(f"L·ªói khi chat: {e}")
        return jsonify({"error": "L·ªói khi giao ti·∫øp v·ªõi AI."}), 500
    # D√ÅN H√ÄM M·ªöI N√ÄY V√ÄO CU·ªêI FILE SERVER.PY
@app.route('/analyze-history', methods=['POST'])
def analyze_history():
    # L·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ frontend g·ª≠i l√™n
    history_data = request.json.get('history')
    if not history_data or len(history_data) < 3: # C·∫ßn √≠t nh·∫•t 3 ƒëi·ªÉm d·ªØ li·ªáu
        return jsonify({"analysis": "Ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ AI ph√¢n t√≠ch."})

    # Chuy·ªÉn d·ªØ li·ªáu th√†nh m·ªôt chu·ªói vƒÉn b·∫£n ƒë∆°n gi·∫£n ƒë·ªÉ AI d·ªÖ ƒë·ªçc
    data_summary = ""
    for item in history_data:
        data_summary += f"- V√†o l√∫c {item['time']}, c·∫£m x√∫c ghi nh·∫≠n l√†: {item['emotion']}\n"

    # ƒê√¢y l√† ph·∫ßn quan tr·ªçng nh·∫•t: "Prompt Engineering"
    # Ch√∫ng ta ra l·ªánh cho AI ph·∫£i ƒë√≥ng vai g√¨, ph√¢n t√≠ch g√¨ v√† theo c·∫•u tr√∫c n√†o.
    system_prompt = """
    B·∫°n l√† m·ªôt chuy√™n gia t√¢m l√Ω AI, c√≥ kh·∫£ nƒÉng ph√¢n t√≠ch s√¢u s·∫Øc v√† ƒë∆∞a ra l·ªùi khuy√™n h·ªØu √≠ch, ƒë·ªìng c·∫£m.
    Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch chu·ªói d·ªØ li·ªáu c·∫£m x√∫c c·ªßa ng∆∞·ªùi d√πng theo th·ªùi gian v√† ƒë∆∞a ra c√°c nh·∫≠n ƒë·ªãnh, g·ª£i √Ω c·ª• th·ªÉ.
    H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, s·ª≠ d·ª•ng vƒÉn phong g·∫ßn g≈©i, ·∫•m √°p.
    """
    user_prompt = f"""
    D∆∞·ªõi ƒë√¢y l√† l·ªãch s·ª≠ c·∫£m x√∫c c·ªßa t√¥i ƒë∆∞·ª£c ghi nh·∫≠n g·∫ßn ƒë√¢y:
    {data_summary}

    D·ª±a v√†o d·ªØ li·ªáu tr√™n, h√£y cung c·∫•p m·ªôt b√†i ph√¢n t√≠ch ng·∫Øn g·ªçn theo ƒë√∫ng c·∫•u tr√∫c 3 ph·∫ßn sau:
    1.  **T·ªïng Quan:** M·ªôt ƒëo·∫°n (2-3 c√¢u) nh·∫≠n x√©t v·ªÅ tr·∫°ng th√°i c·∫£m x√∫c chung (t√≠ch c·ª±c, ti√™u c·ª±c, c√¢n b·∫±ng, hay bi·∫øn ƒë·ªông?).
    2.  **ƒêi·ªÉm C·∫ßn Ch√∫ √ù:** Ch·ªâ ra m·ªôt ho·∫∑c hai c·∫£m x√∫c n·ªïi b·∫≠t ho·∫∑c m·ªôt xu h∆∞·ªõng ƒë√°ng ch√∫ √Ω (v√≠ d·ª•: "AI nh·∫≠n th·∫•y c·∫£m x√∫c 'Bu·ªìn' xu·∫•t hi·ªán kh√° th∆∞·ªùng xuy√™n..." ho·∫∑c "C√≥ v·∫ª nh∆∞ t√¢m tr·∫°ng c·ªßa b·∫°n ƒëang t·ªët d·∫ßn l√™n...").
    3.  **G·ª£i √ù T·ª´ AI:** ƒê∆∞a ra 1-2 g·ª£i √Ω c·ª• th·ªÉ, th·ª±c t·∫ø, mang t√≠nh h√†nh ƒë·ªông ƒë·ªÉ gi√∫p t√¥i c·∫£i thi·ªán ho·∫∑c duy tr√¨ tr·∫°ng th√°i tinh th·∫ßn.
    """

    try:
        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ]
        )
        ai_analysis = completion.choices[0].message.content
        return jsonify({"analysis": ai_analysis})
    except Exception as e:
        print(f"L·ªói khi ph√¢n t√≠ch l·ªãch s·ª≠: {e}")
        return jsonify({"error": "L·ªói khi giao ti·∫øp v·ªõi AI ƒë·ªÉ ph√¢n t√≠ch."}), 500

# 1. ENDPOINT M·ªöI ƒê·ªÇ PH√ÇN T√çCH H√åNH ·∫¢NH B·∫∞NG AI
@app.route('/analyze-image', methods=['POST'])
def analyze_image_ai():
    image_data_url = request.json.get('image')
    if not image_data_url:
        return jsonify({"error": "Kh√¥ng c√≥ d·ªØ li·ªáu ·∫£nh."}), 400

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            response_format={"type": "json_object"},
            messages=[
                {
                    "role": "system",
                    # Y√äU C·∫¶U AI TR·∫¢ V·ªÄ C·∫§U TR√öC 3 PH·∫¶N
                    "content": """
                    B·∫°n l√† m·ªôt chuy√™n gia t√¢m l√Ω tinh t·∫ø. Ph√¢n t√≠ch h√¨nh ·∫£nh, sau ƒë√≥ tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng JSON h·ª£p l·ªá c√≥ ba kh√≥a:
                    1. 'analysis': (string) Ch·ª©a b√†i ph√¢n t√≠ch s√¢u s·∫Øc v·ªÅ t√¢m tr·∫°ng, c·∫£m x√∫c c·ªßa h√¨nh ·∫£nh b·∫±ng ti·∫øng Vi·ªát.
                    2. 'emoji': (string) Ch·ª©a m·ªôt emoji duy nh·∫•t th·ªÉ hi·ªán c·∫£m x√∫c ch√≠nh c·ªßa ·∫£nh.
                    3. 'suggestions': (array of strings) Ch·ª©a 2-3 c√¢u g·ª£i √Ω h√†nh ƒë·ªông ng·∫Øn g·ªçn, h·ªØu √≠ch b·∫±ng ti·∫øng Vi·ªát.
                    """
                },
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "H√£y ph√¢n t√≠ch h√¨nh ·∫£nh n√†y v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON theo y√™u c·∫ßu."},
                        {"type": "image_url", "image_url": {"url": image_data_url}}
                    ],
                }
            ],
            max_tokens=400,
        )
        import json
        ai_response = json.loads(response.choices[0].message.content)
        # S·∫Ω tr·∫£ v·ªÅ d·∫°ng { "analysis": "...", "emoji": "üòä", "suggestions": ["...", "..."] }
        return jsonify(ai_response)
    except Exception as e:
        print(f"L·ªói khi ph√¢n t√≠ch ·∫£nh b·∫±ng AI: {e}")
        return jsonify({"error": "L·ªói khi giao ti·∫øp v·ªõi AI Vision."}), 500

# 2. ENDPOINT M·ªöI ƒê·ªÇ PH√ÇN T√çCH √ÇM THANH B·∫∞NG AI
@app.route('/analyze-audio', methods=['POST'])
def analyze_audio():
    if 'audio_file' not in request.files:
        return jsonify({"error": "Kh√¥ng c√≥ file audio"}), 400
    
    audio_file = request.files['audio_file']
    if audio_file.filename == '':
        return jsonify({"error": "Ch∆∞a ch·ªçn file"}), 400

    try:
        # B∆∞·ªõc 1: D√πng Whisper API ƒë·ªÉ chuy·ªÉn gi·ªçng n√≥i th√†nh vƒÉn b·∫£n
        transcription = client.audio.transcriptions.create(
            model="whisper-1",
            file=(audio_file.filename, audio_file.stream.read())
        )
        transcript_text = transcription.text

        # B∆∞·ªõc 2: D√πng GPT-4o mini ƒë·ªÉ ph√¢n t√≠ch vƒÉn b·∫£n ƒë√£ chuy·ªÉn ƒë·ªïi
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            # Y√™u c·∫ßu AI tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng JSON
            response_format={"type": "json_object"}, 
            messages=[
                {
                    "role": "system",
                    # THAY ƒê·ªîI PROMPT ƒê·ªÇ Y√äU C·∫¶U C·∫§U TR√öC M·ªöI
                    "content": """
                    B·∫°n l√† m·ªôt chuy√™n gia t√¢m l√Ω. D·ª±a v√†o ƒëo·∫°n vƒÉn b·∫£n ƒë∆∞·ª£c phi√™n √¢m t·ª´ gi·ªçng n√≥i, h√£y tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng JSON h·ª£p l·ªá c√≥ b·ªën kh√≥a:
                    1. 'analysis': (string) Ch·ª©a b√†i ph√¢n t√≠ch s√¢u s·∫Øc v·ªÅ t√¢m tr·∫°ng, c·∫£m x√∫c c·ªßa ng∆∞·ªùi n√≥i b·∫±ng ti·∫øng Vi·ªát.
                    2. 'suggestions': (array of strings) Ch·ª©a 2-3 c√¢u g·ª£i √Ω h√†nh ƒë·ªông ng·∫Øn g·ªçn, h·ªØu √≠ch b·∫±ng ti·∫øng Vi·ªát.
                    3. 'transcription': (string) Ch·ª©a l·∫°i ch√≠nh x√°c ƒëo·∫°n vƒÉn b·∫£n g·ªëc ƒë√£ ƒë∆∞·ª£c phi√™n √¢m.
                    4. 'emoji': (string) Ch·ª©a m·ªôt emoji duy nh·∫•t th·ªÉ hi·ªán c·∫£m x√∫c ch√≠nh c·ªßa vƒÉn b·∫£n.
                    """
                },
                {
                    "role": "user",
                    "content": f"H√£y ph√¢n t√≠ch ƒëo·∫°n vƒÉn b·∫£n sau v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON: \"{transcript_text}\""
                }
            ]
        )
        
        # T·∫£i k·∫øt qu·∫£ JSON t·ª´ chu·ªói tr·∫£ v·ªÅ c·ªßa AI
        import json
        ai_response = json.loads(response.choices[0].message.content)
        return jsonify(ai_response) # Tr·∫£ v·ªÅ { "analysis": "...", "suggestions": [...], "transcription": "..."}
        
    except Exception as e:
        print(f"L·ªói khi ph√¢n t√≠ch audio b·∫±ng AI: {e}")
        return jsonify({"error": "L·ªói khi giao ti·∫øp v·ªõi AI."}), 500

# --- PH·∫¶N KH·ªûI CH·∫†Y SERVER ---
if __name__ == '__main__':
    print("ƒêang kh·ªüi t·∫°o c√°c m√¥ h√¨nh AI...")
    try:
        dummy_image = np.zeros((100, 100, 3), dtype=np.uint8)
        DeepFace.analyze(dummy_image, actions=['emotion'], enforce_detection=False)
        print("M√¥ h√¨nh DeepFace ƒë√£ s·∫µn s√†ng.")
    except Exception as e:
        print(f"L·ªói khi kh·ªüi t·∫°o m√¥ h√¨nh DeepFace: {e}")
    
    # Server s·∫Ω ch·∫°y tr√™n c·ªïng 5000 v√† cung c·∫•p c·∫£ 2 API (/analyze v√† /chat)
    print("B·∫Øt ƒë·∫ßu ch·∫°y m√°y ch·ªß t·∫°i http://12.0.0.1:5000")
    app.run(host='0.0.0.0', port=5000)